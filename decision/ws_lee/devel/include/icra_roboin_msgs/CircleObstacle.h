// Generated by gencpp from file icra_roboin_msgs/CircleObstacle.msg
// DO NOT EDIT!


#ifndef ICRA_ROBOIN_MSGS_MESSAGE_CIRCLEOBSTACLE_H
#define ICRA_ROBOIN_MSGS_MESSAGE_CIRCLEOBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace icra_roboin_msgs
{
template <class ContainerAllocator>
struct CircleObstacle_
{
  typedef CircleObstacle_<ContainerAllocator> Type;

  CircleObstacle_()
    : center()
    , radius(0.0)  {
    }
  CircleObstacle_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , radius(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef double _radius_type;
  _radius_type radius;





  typedef boost::shared_ptr< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct CircleObstacle_

typedef ::icra_roboin_msgs::CircleObstacle_<std::allocator<void> > CircleObstacle;

typedef boost::shared_ptr< ::icra_roboin_msgs::CircleObstacle > CircleObstaclePtr;
typedef boost::shared_ptr< ::icra_roboin_msgs::CircleObstacle const> CircleObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace icra_roboin_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'icra_roboin_msgs': ['/home/nvidia/Desktop/tae_han_test_final/src/icra_roboin_msgs/msg', '/home/nvidia/Desktop/tae_han_test_final/devel/share/icra_roboin_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab296cd39c1a1fa7dd67209d6a4767e1";
  }

  static const char* value(const ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab296cd39c1a1fa7ULL;
  static const uint64_t static_value2 = 0xdd67209d6a4767e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "icra_roboin_msgs/CircleObstacle";
  }

  static const char* value(const ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point center\n\
float64 radius\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CircleObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::icra_roboin_msgs::CircleObstacle_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ICRA_ROBOIN_MSGS_MESSAGE_CIRCLEOBSTACLE_H
