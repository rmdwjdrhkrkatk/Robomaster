// Generated by gencpp from file icra_roboin_msgs/BlackboardGeneralInfoResponse.msg
// DO NOT EDIT!


#ifndef ICRA_ROBOIN_MSGS_MESSAGE_BLACKBOARDGENERALINFORESPONSE_H
#define ICRA_ROBOIN_MSGS_MESSAGE_BLACKBOARDGENERALINFORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace icra_roboin_msgs
{
template <class ContainerAllocator>
struct BlackboardGeneralInfoResponse_
{
  typedef BlackboardGeneralInfoResponse_<ContainerAllocator> Type;

  BlackboardGeneralInfoResponse_()
    : stamp()
    , my_id(0)
    , my_life(0)
    , my_teamtype(0)
    , robot_damage_type(0)
    , robot_damage_armor(0)
    , my_bonus_zone(0)
    , my_hp(0)
    , ally_life(0)
    , enemy1_life(0)
    , enemy2_life(0)
    , enemy_bonus_zone(0)
    , time_passed_from_start(0)
    , last_buff_time(0)
    , last_supply_time(0)
    , enemy_last_buff_time(0)
    , ammo(0)
    , game_status(0)
    , robot_bonus(0)
    , supplier_status(0)
    , game_result(0)
    , my_pose()
    , enemy_pose1()
    , enemy_pose2()
    , how_many_enemies_detected(0)
    , is_enemy_1_detected(false)
    , is_enemy_2_detected(false)  {
    }
  BlackboardGeneralInfoResponse_(const ContainerAllocator& _alloc)
    : stamp()
    , my_id(0)
    , my_life(0)
    , my_teamtype(0)
    , robot_damage_type(0)
    , robot_damage_armor(0)
    , my_bonus_zone(0)
    , my_hp(0)
    , ally_life(0)
    , enemy1_life(0)
    , enemy2_life(0)
    , enemy_bonus_zone(0)
    , time_passed_from_start(0)
    , last_buff_time(0)
    , last_supply_time(0)
    , enemy_last_buff_time(0)
    , ammo(0)
    , game_status(0)
    , robot_bonus(0)
    , supplier_status(0)
    , game_result(0)
    , my_pose(_alloc)
    , enemy_pose1(_alloc)
    , enemy_pose2(_alloc)
    , how_many_enemies_detected(0)
    , is_enemy_1_detected(false)
    , is_enemy_2_detected(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef int8_t _my_id_type;
  _my_id_type my_id;

   typedef int8_t _my_life_type;
  _my_life_type my_life;

   typedef int8_t _my_teamtype_type;
  _my_teamtype_type my_teamtype;

   typedef int8_t _robot_damage_type_type;
  _robot_damage_type_type robot_damage_type;

   typedef int8_t _robot_damage_armor_type;
  _robot_damage_armor_type robot_damage_armor;

   typedef int8_t _my_bonus_zone_type;
  _my_bonus_zone_type my_bonus_zone;

   typedef int8_t _my_hp_type;
  _my_hp_type my_hp;

   typedef int8_t _ally_life_type;
  _ally_life_type ally_life;

   typedef int8_t _enemy1_life_type;
  _enemy1_life_type enemy1_life;

   typedef int8_t _enemy2_life_type;
  _enemy2_life_type enemy2_life;

   typedef int8_t _enemy_bonus_zone_type;
  _enemy_bonus_zone_type enemy_bonus_zone;

   typedef int32_t _time_passed_from_start_type;
  _time_passed_from_start_type time_passed_from_start;

   typedef int32_t _last_buff_time_type;
  _last_buff_time_type last_buff_time;

   typedef int32_t _last_supply_time_type;
  _last_supply_time_type last_supply_time;

   typedef int32_t _enemy_last_buff_time_type;
  _enemy_last_buff_time_type enemy_last_buff_time;

   typedef int8_t _ammo_type;
  _ammo_type ammo;

   typedef int8_t _game_status_type;
  _game_status_type game_status;

   typedef int8_t _robot_bonus_type;
  _robot_bonus_type robot_bonus;

   typedef int8_t _supplier_status_type;
  _supplier_status_type supplier_status;

   typedef int8_t _game_result_type;
  _game_result_type game_result;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _my_pose_type;
  _my_pose_type my_pose;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _enemy_pose1_type;
  _enemy_pose1_type enemy_pose1;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _enemy_pose2_type;
  _enemy_pose2_type enemy_pose2;

   typedef uint8_t _how_many_enemies_detected_type;
  _how_many_enemies_detected_type how_many_enemies_detected;

   typedef uint8_t _is_enemy_1_detected_type;
  _is_enemy_1_detected_type is_enemy_1_detected;

   typedef uint8_t _is_enemy_2_detected_type;
  _is_enemy_2_detected_type is_enemy_2_detected;





  typedef boost::shared_ptr< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct BlackboardGeneralInfoResponse_

typedef ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<std::allocator<void> > BlackboardGeneralInfoResponse;

typedef boost::shared_ptr< ::icra_roboin_msgs::BlackboardGeneralInfoResponse > BlackboardGeneralInfoResponsePtr;
typedef boost::shared_ptr< ::icra_roboin_msgs::BlackboardGeneralInfoResponse const> BlackboardGeneralInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace icra_roboin_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'icra_roboin_msgs': ['/home/nvidia/Desktop/tae_han_test_final/src/icra_roboin_msgs/msg', '/home/nvidia/Desktop/tae_han_test_final/devel/share/icra_roboin_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97e8175f34809a4bf1b2a64adca6693a";
  }

  static const char* value(const ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97e8175f34809a4bULL;
  static const uint64_t static_value2 = 0xf1b2a64adca6693aULL;
};

template<class ContainerAllocator>
struct DataType< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "icra_roboin_msgs/BlackboardGeneralInfoResponse";
  }

  static const char* value(const ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
int8 my_id\n\
int8 my_life\n\
int8 my_teamtype\n\
int8 robot_damage_type\n\
int8 robot_damage_armor\n\
int8 my_bonus_zone\n\
int8 my_hp\n\
int8 ally_life\n\
int8 enemy1_life\n\
int8 enemy2_life\n\
int8 enemy_bonus_zone\n\
int32 time_passed_from_start\n\
int32 last_buff_time\n\
int32 last_supply_time\n\
int32 enemy_last_buff_time\n\
int8 ammo\n\
int8 game_status\n\
int8 robot_bonus\n\
int8 supplier_status\n\
int8 game_result\n\
geometry_msgs/PoseStamped my_pose\n\
geometry_msgs/PoseStamped enemy_pose1\n\
geometry_msgs/PoseStamped enemy_pose2\n\
uint8 how_many_enemies_detected\n\
bool is_enemy_1_detected\n\
bool is_enemy_2_detected\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.my_id);
      stream.next(m.my_life);
      stream.next(m.my_teamtype);
      stream.next(m.robot_damage_type);
      stream.next(m.robot_damage_armor);
      stream.next(m.my_bonus_zone);
      stream.next(m.my_hp);
      stream.next(m.ally_life);
      stream.next(m.enemy1_life);
      stream.next(m.enemy2_life);
      stream.next(m.enemy_bonus_zone);
      stream.next(m.time_passed_from_start);
      stream.next(m.last_buff_time);
      stream.next(m.last_supply_time);
      stream.next(m.enemy_last_buff_time);
      stream.next(m.ammo);
      stream.next(m.game_status);
      stream.next(m.robot_bonus);
      stream.next(m.supplier_status);
      stream.next(m.game_result);
      stream.next(m.my_pose);
      stream.next(m.enemy_pose1);
      stream.next(m.enemy_pose2);
      stream.next(m.how_many_enemies_detected);
      stream.next(m.is_enemy_1_detected);
      stream.next(m.is_enemy_2_detected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BlackboardGeneralInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::icra_roboin_msgs::BlackboardGeneralInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "my_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.my_id);
    s << indent << "my_life: ";
    Printer<int8_t>::stream(s, indent + "  ", v.my_life);
    s << indent << "my_teamtype: ";
    Printer<int8_t>::stream(s, indent + "  ", v.my_teamtype);
    s << indent << "robot_damage_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.robot_damage_type);
    s << indent << "robot_damage_armor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.robot_damage_armor);
    s << indent << "my_bonus_zone: ";
    Printer<int8_t>::stream(s, indent + "  ", v.my_bonus_zone);
    s << indent << "my_hp: ";
    Printer<int8_t>::stream(s, indent + "  ", v.my_hp);
    s << indent << "ally_life: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ally_life);
    s << indent << "enemy1_life: ";
    Printer<int8_t>::stream(s, indent + "  ", v.enemy1_life);
    s << indent << "enemy2_life: ";
    Printer<int8_t>::stream(s, indent + "  ", v.enemy2_life);
    s << indent << "enemy_bonus_zone: ";
    Printer<int8_t>::stream(s, indent + "  ", v.enemy_bonus_zone);
    s << indent << "time_passed_from_start: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time_passed_from_start);
    s << indent << "last_buff_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.last_buff_time);
    s << indent << "last_supply_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.last_supply_time);
    s << indent << "enemy_last_buff_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enemy_last_buff_time);
    s << indent << "ammo: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ammo);
    s << indent << "game_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.game_status);
    s << indent << "robot_bonus: ";
    Printer<int8_t>::stream(s, indent + "  ", v.robot_bonus);
    s << indent << "supplier_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.supplier_status);
    s << indent << "game_result: ";
    Printer<int8_t>::stream(s, indent + "  ", v.game_result);
    s << indent << "my_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.my_pose);
    s << indent << "enemy_pose1: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.enemy_pose1);
    s << indent << "enemy_pose2: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.enemy_pose2);
    s << indent << "how_many_enemies_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.how_many_enemies_detected);
    s << indent << "is_enemy_1_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_enemy_1_detected);
    s << indent << "is_enemy_2_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_enemy_2_detected);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ICRA_ROBOIN_MSGS_MESSAGE_BLACKBOARDGENERALINFORESPONSE_H
