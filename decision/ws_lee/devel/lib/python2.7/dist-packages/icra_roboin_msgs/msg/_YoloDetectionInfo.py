# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from icra_roboin_msgs/YoloDetectionInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class YoloDetectionInfo(genpy.Message):
  _md5sum = "8c9b3f0e444e2f6af4be1632d58bee33"
  _type = "icra_roboin_msgs/YoloDetectionInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time stamp
int16 number_of_detection
int8[3] reserved
int8[3] enemy_detected
int16[3] angle_hori
int16[3] angle_verti
int16[3] Pixel_X
int16[3] Pixel_Y
int16[3] Pixel_width
int16[3] Pixel_height
int16[3] real_width
int16[3] real_height
int16[3] distance
"""
  __slots__ = ['stamp','number_of_detection','reserved','enemy_detected','angle_hori','angle_verti','Pixel_X','Pixel_Y','Pixel_width','Pixel_height','real_width','real_height','distance']
  _slot_types = ['time','int16','int8[3]','int8[3]','int16[3]','int16[3]','int16[3]','int16[3]','int16[3]','int16[3]','int16[3]','int16[3]','int16[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,number_of_detection,reserved,enemy_detected,angle_hori,angle_verti,Pixel_X,Pixel_Y,Pixel_width,Pixel_height,real_width,real_height,distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(YoloDetectionInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.number_of_detection is None:
        self.number_of_detection = 0
      if self.reserved is None:
        self.reserved = [0] * 3
      if self.enemy_detected is None:
        self.enemy_detected = [0] * 3
      if self.angle_hori is None:
        self.angle_hori = [0] * 3
      if self.angle_verti is None:
        self.angle_verti = [0] * 3
      if self.Pixel_X is None:
        self.Pixel_X = [0] * 3
      if self.Pixel_Y is None:
        self.Pixel_Y = [0] * 3
      if self.Pixel_width is None:
        self.Pixel_width = [0] * 3
      if self.Pixel_height is None:
        self.Pixel_height = [0] * 3
      if self.real_width is None:
        self.real_width = [0] * 3
      if self.real_height is None:
        self.real_height = [0] * 3
      if self.distance is None:
        self.distance = [0] * 3
    else:
      self.stamp = genpy.Time()
      self.number_of_detection = 0
      self.reserved = [0] * 3
      self.enemy_detected = [0] * 3
      self.angle_hori = [0] * 3
      self.angle_verti = [0] * 3
      self.Pixel_X = [0] * 3
      self.Pixel_Y = [0] * 3
      self.Pixel_width = [0] * 3
      self.Pixel_height = [0] * 3
      self.real_width = [0] * 3
      self.real_height = [0] * 3
      self.distance = [0] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Ih().pack(_x.stamp.secs, _x.stamp.nsecs, _x.number_of_detection))
      buff.write(_get_struct_3b().pack(*self.reserved))
      buff.write(_get_struct_3b().pack(*self.enemy_detected))
      buff.write(_get_struct_3h().pack(*self.angle_hori))
      buff.write(_get_struct_3h().pack(*self.angle_verti))
      buff.write(_get_struct_3h().pack(*self.Pixel_X))
      buff.write(_get_struct_3h().pack(*self.Pixel_Y))
      buff.write(_get_struct_3h().pack(*self.Pixel_width))
      buff.write(_get_struct_3h().pack(*self.Pixel_height))
      buff.write(_get_struct_3h().pack(*self.real_width))
      buff.write(_get_struct_3h().pack(*self.real_height))
      buff.write(_get_struct_3h().pack(*self.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.stamp.secs, _x.stamp.nsecs, _x.number_of_detection,) = _get_struct_2Ih().unpack(str[start:end])
      start = end
      end += 3
      self.reserved = _get_struct_3b().unpack(str[start:end])
      start = end
      end += 3
      self.enemy_detected = _get_struct_3b().unpack(str[start:end])
      start = end
      end += 6
      self.angle_hori = _get_struct_3h().unpack(str[start:end])
      start = end
      end += 6
      self.angle_verti = _get_struct_3h().unpack(str[start:end])
      start = end
      end += 6
      self.Pixel_X = _get_struct_3h().unpack(str[start:end])
      start = end
      end += 6
      self.Pixel_Y = _get_struct_3h().unpack(str[start:end])
      start = end
      end += 6
      self.Pixel_width = _get_struct_3h().unpack(str[start:end])
      start = end
      end += 6
      self.Pixel_height = _get_struct_3h().unpack(str[start:end])
      start = end
      end += 6
      self.real_width = _get_struct_3h().unpack(str[start:end])
      start = end
      end += 6
      self.real_height = _get_struct_3h().unpack(str[start:end])
      start = end
      end += 6
      self.distance = _get_struct_3h().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Ih().pack(_x.stamp.secs, _x.stamp.nsecs, _x.number_of_detection))
      buff.write(self.reserved.tostring())
      buff.write(self.enemy_detected.tostring())
      buff.write(self.angle_hori.tostring())
      buff.write(self.angle_verti.tostring())
      buff.write(self.Pixel_X.tostring())
      buff.write(self.Pixel_Y.tostring())
      buff.write(self.Pixel_width.tostring())
      buff.write(self.Pixel_height.tostring())
      buff.write(self.real_width.tostring())
      buff.write(self.real_height.tostring())
      buff.write(self.distance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.stamp.secs, _x.stamp.nsecs, _x.number_of_detection,) = _get_struct_2Ih().unpack(str[start:end])
      start = end
      end += 3
      self.reserved = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=3)
      start = end
      end += 3
      self.enemy_detected = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=3)
      start = end
      end += 6
      self.angle_hori = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.angle_verti = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.Pixel_X = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.Pixel_Y = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.Pixel_width = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.Pixel_height = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.real_width = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.real_height = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.distance = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3b = None
def _get_struct_3b():
    global _struct_3b
    if _struct_3b is None:
        _struct_3b = struct.Struct("<3b")
    return _struct_3b
_struct_3h = None
def _get_struct_3h():
    global _struct_3h
    if _struct_3h is None:
        _struct_3h = struct.Struct("<3h")
    return _struct_3h
_struct_2Ih = None
def _get_struct_2Ih():
    global _struct_2Ih
    if _struct_2Ih is None:
        _struct_2Ih = struct.Struct("<2Ih")
    return _struct_2Ih
