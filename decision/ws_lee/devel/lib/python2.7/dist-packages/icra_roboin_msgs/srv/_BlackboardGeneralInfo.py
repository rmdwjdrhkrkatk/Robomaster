# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from icra_roboin_msgs/BlackboardGeneralInfoRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class BlackboardGeneralInfoRequest(genpy.Message):
  _md5sum = "66a57ffbb7b0191a46e5cac0c5adf55b"
  _type = "icra_roboin_msgs/BlackboardGeneralInfoRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time stamp
string request_sender
bool confirm
"""
  __slots__ = ['stamp','request_sender','confirm']
  _slot_types = ['time','string','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,request_sender,confirm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BlackboardGeneralInfoRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.request_sender is None:
        self.request_sender = ''
      if self.confirm is None:
        self.confirm = False
    else:
      self.stamp = genpy.Time()
      self.request_sender = ''
      self.confirm = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.request_sender
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.confirm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_sender = str[start:end].decode('utf-8')
      else:
        self.request_sender = str[start:end]
      start = end
      end += 1
      (self.confirm,) = _get_struct_B().unpack(str[start:end])
      self.confirm = bool(self.confirm)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.request_sender
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.confirm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request_sender = str[start:end].decode('utf-8')
      else:
        self.request_sender = str[start:end]
      start = end
      end += 1
      (self.confirm,) = _get_struct_B().unpack(str[start:end])
      self.confirm = bool(self.confirm)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from icra_roboin_msgs/BlackboardGeneralInfoResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import std_msgs.msg

class BlackboardGeneralInfoResponse(genpy.Message):
  _md5sum = "97e8175f34809a4bf1b2a64adca6693a"
  _type = "icra_roboin_msgs/BlackboardGeneralInfoResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time stamp
int8 my_id
int8 my_life
int8 my_teamtype
int8 robot_damage_type
int8 robot_damage_armor
int8 my_bonus_zone
int8 my_hp
int8 ally_life
int8 enemy1_life
int8 enemy2_life
int8 enemy_bonus_zone
int32 time_passed_from_start
int32 last_buff_time
int32 last_supply_time
int32 enemy_last_buff_time
int8 ammo
int8 game_status
int8 robot_bonus
int8 supplier_status
int8 game_result
geometry_msgs/PoseStamped my_pose
geometry_msgs/PoseStamped enemy_pose1
geometry_msgs/PoseStamped enemy_pose2
uint8 how_many_enemies_detected
bool is_enemy_1_detected
bool is_enemy_2_detected







================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['stamp','my_id','my_life','my_teamtype','robot_damage_type','robot_damage_armor','my_bonus_zone','my_hp','ally_life','enemy1_life','enemy2_life','enemy_bonus_zone','time_passed_from_start','last_buff_time','last_supply_time','enemy_last_buff_time','ammo','game_status','robot_bonus','supplier_status','game_result','my_pose','enemy_pose1','enemy_pose2','how_many_enemies_detected','is_enemy_1_detected','is_enemy_2_detected']
  _slot_types = ['time','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int8','int32','int32','int32','int32','int8','int8','int8','int8','int8','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,my_id,my_life,my_teamtype,robot_damage_type,robot_damage_armor,my_bonus_zone,my_hp,ally_life,enemy1_life,enemy2_life,enemy_bonus_zone,time_passed_from_start,last_buff_time,last_supply_time,enemy_last_buff_time,ammo,game_status,robot_bonus,supplier_status,game_result,my_pose,enemy_pose1,enemy_pose2,how_many_enemies_detected,is_enemy_1_detected,is_enemy_2_detected

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BlackboardGeneralInfoResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.my_id is None:
        self.my_id = 0
      if self.my_life is None:
        self.my_life = 0
      if self.my_teamtype is None:
        self.my_teamtype = 0
      if self.robot_damage_type is None:
        self.robot_damage_type = 0
      if self.robot_damage_armor is None:
        self.robot_damage_armor = 0
      if self.my_bonus_zone is None:
        self.my_bonus_zone = 0
      if self.my_hp is None:
        self.my_hp = 0
      if self.ally_life is None:
        self.ally_life = 0
      if self.enemy1_life is None:
        self.enemy1_life = 0
      if self.enemy2_life is None:
        self.enemy2_life = 0
      if self.enemy_bonus_zone is None:
        self.enemy_bonus_zone = 0
      if self.time_passed_from_start is None:
        self.time_passed_from_start = 0
      if self.last_buff_time is None:
        self.last_buff_time = 0
      if self.last_supply_time is None:
        self.last_supply_time = 0
      if self.enemy_last_buff_time is None:
        self.enemy_last_buff_time = 0
      if self.ammo is None:
        self.ammo = 0
      if self.game_status is None:
        self.game_status = 0
      if self.robot_bonus is None:
        self.robot_bonus = 0
      if self.supplier_status is None:
        self.supplier_status = 0
      if self.game_result is None:
        self.game_result = 0
      if self.my_pose is None:
        self.my_pose = geometry_msgs.msg.PoseStamped()
      if self.enemy_pose1 is None:
        self.enemy_pose1 = geometry_msgs.msg.PoseStamped()
      if self.enemy_pose2 is None:
        self.enemy_pose2 = geometry_msgs.msg.PoseStamped()
      if self.how_many_enemies_detected is None:
        self.how_many_enemies_detected = 0
      if self.is_enemy_1_detected is None:
        self.is_enemy_1_detected = False
      if self.is_enemy_2_detected is None:
        self.is_enemy_2_detected = False
    else:
      self.stamp = genpy.Time()
      self.my_id = 0
      self.my_life = 0
      self.my_teamtype = 0
      self.robot_damage_type = 0
      self.robot_damage_armor = 0
      self.my_bonus_zone = 0
      self.my_hp = 0
      self.ally_life = 0
      self.enemy1_life = 0
      self.enemy2_life = 0
      self.enemy_bonus_zone = 0
      self.time_passed_from_start = 0
      self.last_buff_time = 0
      self.last_supply_time = 0
      self.enemy_last_buff_time = 0
      self.ammo = 0
      self.game_status = 0
      self.robot_bonus = 0
      self.supplier_status = 0
      self.game_result = 0
      self.my_pose = geometry_msgs.msg.PoseStamped()
      self.enemy_pose1 = geometry_msgs.msg.PoseStamped()
      self.enemy_pose2 = geometry_msgs.msg.PoseStamped()
      self.how_many_enemies_detected = 0
      self.is_enemy_1_detected = False
      self.is_enemy_2_detected = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I11b4i5b3I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.my_id, _x.my_life, _x.my_teamtype, _x.robot_damage_type, _x.robot_damage_armor, _x.my_bonus_zone, _x.my_hp, _x.ally_life, _x.enemy1_life, _x.enemy2_life, _x.enemy_bonus_zone, _x.time_passed_from_start, _x.last_buff_time, _x.last_supply_time, _x.enemy_last_buff_time, _x.ammo, _x.game_status, _x.robot_bonus, _x.supplier_status, _x.game_result, _x.my_pose.header.seq, _x.my_pose.header.stamp.secs, _x.my_pose.header.stamp.nsecs))
      _x = self.my_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.my_pose.pose.position.x, _x.my_pose.pose.position.y, _x.my_pose.pose.position.z, _x.my_pose.pose.orientation.x, _x.my_pose.pose.orientation.y, _x.my_pose.pose.orientation.z, _x.my_pose.pose.orientation.w, _x.enemy_pose1.header.seq, _x.enemy_pose1.header.stamp.secs, _x.enemy_pose1.header.stamp.nsecs))
      _x = self.enemy_pose1.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.enemy_pose1.pose.position.x, _x.enemy_pose1.pose.position.y, _x.enemy_pose1.pose.position.z, _x.enemy_pose1.pose.orientation.x, _x.enemy_pose1.pose.orientation.y, _x.enemy_pose1.pose.orientation.z, _x.enemy_pose1.pose.orientation.w, _x.enemy_pose2.header.seq, _x.enemy_pose2.header.stamp.secs, _x.enemy_pose2.header.stamp.nsecs))
      _x = self.enemy_pose2.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3B().pack(_x.enemy_pose2.pose.position.x, _x.enemy_pose2.pose.position.y, _x.enemy_pose2.pose.position.z, _x.enemy_pose2.pose.orientation.x, _x.enemy_pose2.pose.orientation.y, _x.enemy_pose2.pose.orientation.z, _x.enemy_pose2.pose.orientation.w, _x.how_many_enemies_detected, _x.is_enemy_1_detected, _x.is_enemy_2_detected))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.my_pose is None:
        self.my_pose = geometry_msgs.msg.PoseStamped()
      if self.enemy_pose1 is None:
        self.enemy_pose1 = geometry_msgs.msg.PoseStamped()
      if self.enemy_pose2 is None:
        self.enemy_pose2 = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.stamp.secs, _x.stamp.nsecs, _x.my_id, _x.my_life, _x.my_teamtype, _x.robot_damage_type, _x.robot_damage_armor, _x.my_bonus_zone, _x.my_hp, _x.ally_life, _x.enemy1_life, _x.enemy2_life, _x.enemy_bonus_zone, _x.time_passed_from_start, _x.last_buff_time, _x.last_supply_time, _x.enemy_last_buff_time, _x.ammo, _x.game_status, _x.robot_bonus, _x.supplier_status, _x.game_result, _x.my_pose.header.seq, _x.my_pose.header.stamp.secs, _x.my_pose.header.stamp.nsecs,) = _get_struct_2I11b4i5b3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.my_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.my_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.my_pose.pose.position.x, _x.my_pose.pose.position.y, _x.my_pose.pose.position.z, _x.my_pose.pose.orientation.x, _x.my_pose.pose.orientation.y, _x.my_pose.pose.orientation.z, _x.my_pose.pose.orientation.w, _x.enemy_pose1.header.seq, _x.enemy_pose1.header.stamp.secs, _x.enemy_pose1.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enemy_pose1.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.enemy_pose1.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.enemy_pose1.pose.position.x, _x.enemy_pose1.pose.position.y, _x.enemy_pose1.pose.position.z, _x.enemy_pose1.pose.orientation.x, _x.enemy_pose1.pose.orientation.y, _x.enemy_pose1.pose.orientation.z, _x.enemy_pose1.pose.orientation.w, _x.enemy_pose2.header.seq, _x.enemy_pose2.header.stamp.secs, _x.enemy_pose2.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enemy_pose2.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.enemy_pose2.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 59
      (_x.enemy_pose2.pose.position.x, _x.enemy_pose2.pose.position.y, _x.enemy_pose2.pose.position.z, _x.enemy_pose2.pose.orientation.x, _x.enemy_pose2.pose.orientation.y, _x.enemy_pose2.pose.orientation.z, _x.enemy_pose2.pose.orientation.w, _x.how_many_enemies_detected, _x.is_enemy_1_detected, _x.is_enemy_2_detected,) = _get_struct_7d3B().unpack(str[start:end])
      self.is_enemy_1_detected = bool(self.is_enemy_1_detected)
      self.is_enemy_2_detected = bool(self.is_enemy_2_detected)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I11b4i5b3I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.my_id, _x.my_life, _x.my_teamtype, _x.robot_damage_type, _x.robot_damage_armor, _x.my_bonus_zone, _x.my_hp, _x.ally_life, _x.enemy1_life, _x.enemy2_life, _x.enemy_bonus_zone, _x.time_passed_from_start, _x.last_buff_time, _x.last_supply_time, _x.enemy_last_buff_time, _x.ammo, _x.game_status, _x.robot_bonus, _x.supplier_status, _x.game_result, _x.my_pose.header.seq, _x.my_pose.header.stamp.secs, _x.my_pose.header.stamp.nsecs))
      _x = self.my_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.my_pose.pose.position.x, _x.my_pose.pose.position.y, _x.my_pose.pose.position.z, _x.my_pose.pose.orientation.x, _x.my_pose.pose.orientation.y, _x.my_pose.pose.orientation.z, _x.my_pose.pose.orientation.w, _x.enemy_pose1.header.seq, _x.enemy_pose1.header.stamp.secs, _x.enemy_pose1.header.stamp.nsecs))
      _x = self.enemy_pose1.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.enemy_pose1.pose.position.x, _x.enemy_pose1.pose.position.y, _x.enemy_pose1.pose.position.z, _x.enemy_pose1.pose.orientation.x, _x.enemy_pose1.pose.orientation.y, _x.enemy_pose1.pose.orientation.z, _x.enemy_pose1.pose.orientation.w, _x.enemy_pose2.header.seq, _x.enemy_pose2.header.stamp.secs, _x.enemy_pose2.header.stamp.nsecs))
      _x = self.enemy_pose2.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3B().pack(_x.enemy_pose2.pose.position.x, _x.enemy_pose2.pose.position.y, _x.enemy_pose2.pose.position.z, _x.enemy_pose2.pose.orientation.x, _x.enemy_pose2.pose.orientation.y, _x.enemy_pose2.pose.orientation.z, _x.enemy_pose2.pose.orientation.w, _x.how_many_enemies_detected, _x.is_enemy_1_detected, _x.is_enemy_2_detected))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.my_pose is None:
        self.my_pose = geometry_msgs.msg.PoseStamped()
      if self.enemy_pose1 is None:
        self.enemy_pose1 = geometry_msgs.msg.PoseStamped()
      if self.enemy_pose2 is None:
        self.enemy_pose2 = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.stamp.secs, _x.stamp.nsecs, _x.my_id, _x.my_life, _x.my_teamtype, _x.robot_damage_type, _x.robot_damage_armor, _x.my_bonus_zone, _x.my_hp, _x.ally_life, _x.enemy1_life, _x.enemy2_life, _x.enemy_bonus_zone, _x.time_passed_from_start, _x.last_buff_time, _x.last_supply_time, _x.enemy_last_buff_time, _x.ammo, _x.game_status, _x.robot_bonus, _x.supplier_status, _x.game_result, _x.my_pose.header.seq, _x.my_pose.header.stamp.secs, _x.my_pose.header.stamp.nsecs,) = _get_struct_2I11b4i5b3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.my_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.my_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.my_pose.pose.position.x, _x.my_pose.pose.position.y, _x.my_pose.pose.position.z, _x.my_pose.pose.orientation.x, _x.my_pose.pose.orientation.y, _x.my_pose.pose.orientation.z, _x.my_pose.pose.orientation.w, _x.enemy_pose1.header.seq, _x.enemy_pose1.header.stamp.secs, _x.enemy_pose1.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enemy_pose1.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.enemy_pose1.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.enemy_pose1.pose.position.x, _x.enemy_pose1.pose.position.y, _x.enemy_pose1.pose.position.z, _x.enemy_pose1.pose.orientation.x, _x.enemy_pose1.pose.orientation.y, _x.enemy_pose1.pose.orientation.z, _x.enemy_pose1.pose.orientation.w, _x.enemy_pose2.header.seq, _x.enemy_pose2.header.stamp.secs, _x.enemy_pose2.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.enemy_pose2.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.enemy_pose2.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 59
      (_x.enemy_pose2.pose.position.x, _x.enemy_pose2.pose.position.y, _x.enemy_pose2.pose.position.z, _x.enemy_pose2.pose.orientation.x, _x.enemy_pose2.pose.orientation.y, _x.enemy_pose2.pose.orientation.z, _x.enemy_pose2.pose.orientation.w, _x.how_many_enemies_detected, _x.is_enemy_1_detected, _x.is_enemy_2_detected,) = _get_struct_7d3B().unpack(str[start:end])
      self.is_enemy_1_detected = bool(self.is_enemy_1_detected)
      self.is_enemy_2_detected = bool(self.is_enemy_2_detected)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d3B = None
def _get_struct_7d3B():
    global _struct_7d3B
    if _struct_7d3B is None:
        _struct_7d3B = struct.Struct("<7d3B")
    return _struct_7d3B
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_2I11b4i5b3I = None
def _get_struct_2I11b4i5b3I():
    global _struct_2I11b4i5b3I
    if _struct_2I11b4i5b3I is None:
        _struct_2I11b4i5b3I = struct.Struct("<2I11b4i5b3I")
    return _struct_2I11b4i5b3I
class BlackboardGeneralInfo(object):
  _type          = 'icra_roboin_msgs/BlackboardGeneralInfo'
  _md5sum = 'b163c0ce1011a983e5ca043d25ff9b1c'
  _request_class  = BlackboardGeneralInfoRequest
  _response_class = BlackboardGeneralInfoResponse
